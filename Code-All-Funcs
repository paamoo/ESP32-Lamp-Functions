import utime
from machine import Pin, PWM

# Define the pin numbers for your lamps
LAMP_PINS = {
    1: 26,  # Pin for Badezimmer
    4: 27,  # Pin for Wohnzimmer
}

# Define the pins for your RGB LED
RED_PIN = 14
GREEN_PIN = 25
BLUE_PIN = 33

# Initialize the lamp pins
def initialize_lamps():
    for pin in LAMP_PINS.values():
        Pin(pin, Pin.OUT).value(0)

# Initialize the RGB LED pins as PWM outputs
def initialize_rgb_led():
    red_pwm = PWM(Pin(RED_PIN), freq=1000, duty=0)
    green_pwm = PWM(Pin(GREEN_PIN), freq=1000, duty=0)
    blue_pwm = PWM(Pin(BLUE_PIN), freq=1000, duty=0)
    return red_pwm, green_pwm, blue_pwm

# Function to control a lamp based on status
def control_lamp(lamp_id, status):
    pin = LAMP_PINS.get(lamp_id)
    if pin is not None:
        # Update the lamp state by setting the GPIO pin
        Pin(pin, Pin.OUT).value(status)
        if status:
            print(f"Lamp {lamp_id} turned ON")
        else:
            print(f"Lamp {lamp_id} turned OFF")

# Function to set the color of the RGB LED based on a hex color code
def set_rgb_color(hex_color, red_pwm, green_pwm, blue_pwm):
    # Parse the hex color code and extract individual RGB components
    red = int(hex_color[1:3], 16)
    green = int(hex_color[3:5], 16)
    blue = int(hex_color[5:7], 16)

    # Set the RGB LED to the specified color
    red_pwm.duty(red)
    green_pwm.duty(green)
    blue_pwm.duty(blue)

# Function to control the brightness of the lamp
def control_lamp_brightness(brightness, lamp_pwm):
    # Set the duty cycle of the PWM to control brightness (0-1023 for full range)
    lamp_pwm.duty(int(brightness * 10.23))  # Scale brightness to 0-1023

# Simulate receiving lamp status data from an API
def simulate_lamp_status():
    sample_data = [
        {"id": 1, "status": True},   # Turn Lamp 1 ON
        {"id": 4, "status": True},   # Turn Lamp 4 OFF
    ]
    return sample_data

# Simulate receiving RGB color data from an API
def simulate_rgb_color():
    sample_rgb_data = [
        {"id": 1, "color": "#7CFC00"},  # Set RGB LED to red
    ]
    return sample_rgb_data

# Simulate changing the brightness of the lamp
def simulate_brightness():
    while True:
        sample_brightness = 1  # Set the desired brightness (0-100)
        control_lamp_brightness(sample_brightness, lamp_pwm)
        utime.sleep(1)
        sample_brightness = 100
        control_lamp_brightness(sample_brightness, lamp_pwm)
        utime.sleep(1)

if __name__ == "__main__":
    initialize_lamps()
    red_pwm, green_pwm, blue_pwm = initialize_rgb_led()

    lamp_status_data = simulate_lamp_status()
    for lamp_data in lamp_status_data:
        lamp_id = lamp_data.get("id")
        status = lamp_data.get("status")
        control_lamp(lamp_id, status)

    rgb_color_data = simulate_rgb_color()
    for rgb_data in rgb_color_data:
        rgb_color = rgb_data.get("color")
        set_rgb_color(rgb_color, red_pwm, green_pwm, blue_pwm)

    lamp_pwm = PWM(Pin(LAMP_PINS[1]), freq=1000, duty=0)  # Initialize with 0% duty cycle (lamp off)
    simulate_brightness()

